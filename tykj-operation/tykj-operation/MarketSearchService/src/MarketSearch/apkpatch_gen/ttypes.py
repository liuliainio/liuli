#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ApkPatchStatus(object):
  SUCCEED = 0
  FAIL = 1

  _VALUES_TO_NAMES = {
    0: "SUCCEED",
    1: "FAIL",
  }

  _NAMES_TO_VALUES = {
    "SUCCEED": 0,
    "FAIL": 1,
  }


class ApkPatchResult(object):
  """
  Attributes:
   - old_size
   - new_size
   - patch_size
   - patch_file
   - status
   - patch_hash
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'old_size', None, None, ), # 1
    (2, TType.I32, 'new_size', None, None, ), # 2
    (3, TType.I32, 'patch_size', None, None, ), # 3
    (4, TType.STRING, 'patch_file', None, None, ), # 4
    (5, TType.I32, 'status', None, None, ), # 5
    (6, TType.STRING, 'patch_hash', None, None, ), # 6
  )

  def __init__(self, old_size=None, new_size=None, patch_size=None, patch_file=None, status=None, patch_hash=None,):
    self.old_size = old_size
    self.new_size = new_size
    self.patch_size = patch_size
    self.patch_file = patch_file
    self.status = status
    self.patch_hash = patch_hash

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.old_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.new_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.patch_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.patch_file = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.patch_hash = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApkPatchResult')
    if self.old_size is not None:
      oprot.writeFieldBegin('old_size', TType.I32, 1)
      oprot.writeI32(self.old_size)
      oprot.writeFieldEnd()
    if self.new_size is not None:
      oprot.writeFieldBegin('new_size', TType.I32, 2)
      oprot.writeI32(self.new_size)
      oprot.writeFieldEnd()
    if self.patch_size is not None:
      oprot.writeFieldBegin('patch_size', TType.I32, 3)
      oprot.writeI32(self.patch_size)
      oprot.writeFieldEnd()
    if self.patch_file is not None:
      oprot.writeFieldBegin('patch_file', TType.STRING, 4)
      oprot.writeString(self.patch_file)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 5)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.patch_hash is not None:
      oprot.writeFieldBegin('patch_hash', TType.STRING, 6)
      oprot.writeString(self.patch_hash)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
